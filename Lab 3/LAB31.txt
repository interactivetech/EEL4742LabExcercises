//C Program 1: Part 8
//---------------------------------------------------------------
// Console I/O through the on board UART for MSP 430X4XXX
//---------------------------------------------------------------
void Init_UART(void);
void OUTA_UART(unsigned char A);
void send(char* str);			//send method declared
unsigned char INCHAR_UART(void);

#include "msp430fg4618.h"
#include "stdio.h"

int main(void){

	//String to be printed declaration
	//char stringA[];
	unsigned char a, b, c;
	WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
	Init_UART();

	for(;;){
	a=INCHAR_UART();
	OUTA_UART(a);
	b=INCHAR_UART();
	OUTA_UART(b);

	a = a - 0x30;

	if (b>= 0x41){
		b = b - 0x37;}
	else{
		b = b - 0x30;}

	c = a+b;

	OUTA_UART(0x20);
	//OUTA_UART(0X41);
	OUTA_UART(b);
	OUTA_UART(0x0A);
	OUTA_UART(0x0D);
	}
}

//This function should send in the string to output one char at a time
void send(char *str){

	int i;

	//Loop to run for as long as stringA(str) is, ie for each char
	for(i=0;i<strlen(str);i++) {
		OUTA_UART(str[i]);	//send in each char to outa which prints it
	}

	//prints next line and moves cursor
	OUTA_UART(0x0A);
	OUTA_UART(0x0D);
}

//rest of code unmodified

void OUTA_UART(unsigned char A){
//---------------------------------------------------------------
//***************************************************************
//---------------------------------------------------------------
// IFG2 register (1) = 1 transmit buffer is empty,
// UCA0TXBUF 8 bit transmit buffer
// wait for the transmit buffer to be empty before sending the
// data out
do{
  }while ((IFG2&0x02)==0);
// send the data to the transmit buffer
UCA0TXBUF =A;
}


void Init_UART(void){
//---------------------------------------------------------------
// Initialization code to set up the uart on the experimenter
// board to 8 data,
// 1 stop, no parity, and 9600 baud, polling operation
//---------------------------------------------------------------
P2SEL=0x30; // transmit and receive to port 2 b its 4 and 5

UCA0CTL0=0; // 8 data, no parity 1 stop, uart, async

UCA0CTL1= 0x41;

UCA0BR1=0; // upper byte of divider clock word
UCA0BR0=3; // clock divide from a clock to bit clock 32768/9600

UCA0MCTL=0x06;

UCA0STAT=0; // do not loop the transmitter back to the

UCA0CTL1=0x40;

IE2=0; // turn transmit interrupts off
}
unsigned char INCHAR_UART(void){
//---------------------------------------------------------------
//***************************************************************
//---------------------------------------------------------------
// IFG2 register (0) = 1 receive buffer is full,
// UCA0RXBUF 8 bit receive buffer
// wait for the receive buffer is full before getting the data
do{
}while ((IFG2&0x01)==0);
// go get the char from the receive buffer
return (UCA0RXBUF);
}

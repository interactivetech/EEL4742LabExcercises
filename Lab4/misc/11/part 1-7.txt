#include "msp430fg4618.h"
#include "stdio.h"
void Init_LCD(void);
// setup a pointer to the area of memory of the TMS430 that points to
// the segments
// of the softbaugh LCD LCDM3 = the starting address
// each of the seven segments for each display is store in memory
// starting at address LCDM3
// which is the right most seven segment of the LCD
// The bit order in each byte is
// dp, E, G, F, D, C, B, A or
// :, E, G, F, D, C, B, A
// after the seven segments these memory locations are used to turn on
// the special characters
// such as battery status, antenna, f1-f4, etc.
// there are 7 seven segment displays
unsigned char *LCDSeg = (unsigned char *) &LCDM3;
// there are 11 locations that are needed for the softbaugh LCD
// ony 7 used for the seven segment displays

int LCD_SIZE=11;
int main(void){

	volatile unsigned int digits[10];
	volatile unsigned int i; // volatile to prevent optimization
	volatile unsigned int y; // volatile to prevent optimization
	volatile unsigned int x; // volatile to prevent optimization
	volatile unsigned int z; // volatile to prevent optimization
	WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
	// setup pprt 3 as an output so to be able to turn on the LED
	// go Initialize the LCD
	Init_LCD();
	// Turn on all of the segments
	// LCD_SIZE-4 only gives the 7 segment displays plus DP,
	// and colons colons = dp
	// Right most display is at LCDSeg[0];
	
	//Array digits have the binary representation of numbers 0-9
	digits[0]=0x5F;
	digits[1]=0x06;
	digits[2]=0x6B;
	digits[3]=0x2F;
	digits[4]=0x36;
	digits[5]=0x3D;
	digits[6]=0x7D;
	digits[7]=0x07;
	digits[8]=0x7F;
	digits[9]=0x37;

	P1DIR &= 0x00;	//sets directions of sw1 and sw2 to input
	
	//y is the global counter that counts from 0 to 999
	//since in every iteration the y counter is updated unconditionally.
	//It is set to -1 at the beginning of the program so at the end of each iteration
	//y points to the actual number been display in the LCD screen
	y=-1;
	
	//x is the counter keeping track of the tenth numbers, it displays numbers
	//from 1-9 in the LCDSeg[1] position, if x==0, LCDSeg[1] is overwritten to 0x00
	//to clear the LCD display at that position
	x=0;
	
	//y is the counter keeping track of the hundredth numbers, it displays numbers
	//from 1-9 in the LCDSeg[2] position, if z==0, LCDSeg[2] is overwritten to 0x00
	//to clear the LCD display at that position
	z=0;
	
	//it displays the first numbers of digits which is 0
	LCDSeg[0]=digits[0];

	for (;;){
	
		// Conditional statement that checks if the SW1 button
		// is being pressed
		if((P1IN & 0x01) == 0){
			//if SW1 is pressed, increase y by 1
			y++;
			
			if(y==1000){
			//if y==1000, the display went from 999 to 0, it overwrites x,z, and y 
			//and it displays the number 0 in the LCD display right most segment
			
				x=0;
				z=0;
				y=0;
				LCDSeg[2]=0x00;
				LCDSeg[1]=0x00;
				LCDSeg[0]=digits[0];
				
			}

			else{
				
				//both if statements check to see if y!=0
				//that is because 0%100 or 0%10 are equal to 0 which will execute the code in each if statement
				//when y==0 is not allow to enter the if statements
				
				if(y%100==0 && y!=0){
				//if y%100==0 it means it went from 99 to 100 or 199 to 200 or 299 to 300...899 to 900
				//in that case, the z counter needs to increase by one and it needs to be updated
				//in the LCD screen
				
					z++;					//updating the z counter by 1
					LCDSeg[2]=digits[z];	//updating the LCD display
					
				}

				if(y%10==0 && y!=0){
				//if y%100==0 it means it went from 99 to 100 or 199 to 200 or 299 to 300...899 to 900
				//in that case, the z counter needs to increase by one and it needs to be updated
				//in the LCD screen
				
					x++;					//updating the x counter by 1
					LCDSeg[1]=digits[x%10];	//updating the LCD display
					
				}

				LCDSeg[0]=digits[y%10];		//updates the LCD display of the right most LCD segment
				
			}
		}
		
		// Conditional statement that checks if the SW2 button
		// is being pressed
		if ((P1IN & 0x02) == 0){
			//if SW2 is pressed, decrease y by 1
			y--;

			if(y==-1){
			//if y==-1, the display should went from 0 to 999, it overwrites x,z, and y counters
			//and it displays the number 999 in the LCD display
				
				//updates x,z, and y counters to point to the number 999
				x=99;				
				z=9;
				y=999;
				
				//updates the display to show 999 in the LCD display
				LCDSeg[2]=digits[9];
				LCDSeg[1]=digits[9];
				LCDSeg[0]=digits[9];
				
			}
			
			else{

				LCDSeg[0]=digits[y%10];		//updates the LCD display of the right most LCD segment

				if(y%10==9 && y!=0){
				//if y%10==9, it means the display went from 10 to 9 or 20 to 19 or 30 to 29 ... or 100 to 99
				//in that case, the x counter needs to decrease by 1
				
					x--;			//decreasing x counter by 1
					
					//if x and z counters are 0, the number went from 10 to 9 and the LCDSeg[1] needs to be clear in the LCD display
					if(x==0 && z==0)
						LCDSeg[1]=0x00;	//clearing LCDSeg[1] 
					
					//else, just displays the updated number to the LCD display
					else
						LCDSeg[1]=digits[x%10];

				}
				
				if(y%100==99 && y!=0){
				//if y%100==99, it means the display went from 100 to 99 or 200 to 199 or 300 to 299 ... or 900 to 899
				//in that case, the z counter needs to decrease by 1
				
					z--;			//decreasing z counter by 1
					
					//if z==0, the number went from 100 to 99 and LCDSeg[2] needs to be clear in the LCD display
					if (z==0)
						LCDSeg[2]=0x00;	//clearing LCDSeg[2] 
					
					//else, just displays the updated number to the LCD display
					else
						LCDSeg[2]=digits[z];
				}
			}

		}
		
		//delays each iteration so the numbers can change at a pace
		//the human eye can see
		i = 0xFFFF; // SW Delay
		do i--;
		while (i != 0);

	}
}
//---------------------------------------------------------------------
// Initialize the LCD system
//---------------------------------------------------------------------
void Init_LCD(void){
// Using the LCD A controller for the MSP430fg4618
// the pins of the LCD are memory mapped onto the mp430F4xxx
// memory bus and
// are accessed via LCDSeg[i] array
// See page 260 of Davie's text
// LCD_SIZE-4 only gives the 7 segment displays plus DP, and
// (colons are the same bit setting)
// LCD_SIZE-4 only gives the 7 segment displays plus DP, and
// colons (colons / dp)
// Right most seven segment display is at LCDSeg[0];
// Display format
// 			AAA
// 		   F   B
// 		X  F   B
// 			GGG
//  	X  E   C
// 		   E   C
// 		DP  DDD
// bit order
// dp, E, G, F, D, C, B, A or
// :, E, G, F, D, C, B, A
	int n;
	for (n=0;n<LCD_SIZE;n++){
		// initialize the segment memory to zero to clear the LCD
		// writing a zero in the LCD memory location clears turns
		// off the LCD segment
		// Including all of the special characters
		// This way or
		*(LCDSeg+n) = 0;
		// LCDSeg[n]=0;
	}
// Port 5 ports 5.2-5.4 are connected to com1, com2, com3 of LCD and
// com0 is fixed and already assigned
// Need to assign com1 - com3 to port5
	P5SEL = 0x1C; // BIT4 | BIT3 |BIT2 = 1 P5.4, P.3, P5.2 = 1
// Used the internal voltage for the LCD bit 4 = 0 (VLCDEXT=0)
// internal bias voltage set to 1/3 of Vcc, charge pump disabled,
// page 26-25 of MSP430x4xx user manual
	LCDAVCTL0 = 0x00;
// LCDS28-LCDS0 pins LCDS0 = lsb and LCDS28 = MSB need
// LCDS4 through LCDS24
// from the experimenter board schematic the LCD uses S4-S24,
// S0-S3 are not used here
// Only use up to S24 on the LCD 28-31 not needed.
// Also LCDACTL1 not required since not using S32 - S39
// Davie's book page 260
// page 26-23 of MSP430x4xx user manual
	LCDAPCTL0 = 0x7E;
// The LCD uses the ACLK as the master clock as the scan rate for
// the display segments
// The ACLK has been set to 32768 Hz with the external
// 327768 Hz crystal
// Let's use scan frequency of 256 Hz (This is fast enough not
// to see the display flicker)
// or a divisor of 128
// LCDFREQ division(3 bits), LCDMUX (2 bits), LCDSON segments on,
// Not used, LCDON LCD module on
// 011 = freq /128, 11 = 4 mux's needed since the display uses for
// common inputs com0-com3
// need to turn the LCD on LCDON = 1
// LCDSON allows the segments to be blanked good for blinking but
// needs to be on to
// display the LCD segments LCDSON = 1
// Bit pattern required = 0111 1101 = 0x7d
// page 26-22 of MSP430x4xx user manual
	LCDACTL = 0x7d;
}

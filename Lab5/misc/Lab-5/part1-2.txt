
void Init_UART(void);
void OUTA_UART(unsigned char A);
unsigned char INCHAR_UART(void);
void printHex(int number, int digits[]);
int ASCIItoDecimal(char letter);
int twoHexnumb();
char HextoASCII(int hex);
void Init_LCD(void);
#include "msp430fg4618.h"
#include "stdio.h"

int LCD_SIZE=11;
unsigned char *LCDSeg = (unsigned char *) &LCDM3;

void main(void) {


	unsigned volatile int hexNums[2];
	unsigned volatile int result;

	int digits[16];
	digits[0]=0x5F;
	digits[1]=0x06;
	digits[2]=0x6B;
	digits[3]=0x2F;
	digits[4]=0x36;
	digits[5]=0x3D;
	digits[6]=0x7D;
	digits[7]=0x07;
	digits[8]=0x7F;
	digits[9]=0x37;
	digits[10]=0x77;
	digits[11]=0x7C;
	digits[12]=0x59;
	digits[13]=0x6E;
	digits[14]=0x79;
	digits[15]=0x71;

	WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
	Init_UART();
	Init_LCD();

	for(;;){

		hexNums[0]=twoHexnumb();
		OUTA_UART(0X20);
		OUTA_UART(INCHAR_UART());
		OUTA_UART(0X20);
		hexNums[1]=twoHexnumb();
		OUTA_UART(0X20);
		OUTA_UART(0X3D);
		OUTA_UART(0X20);
		result=hexNums[0]+hexNums[1];
		printHex(result,digits);
		OUTA_UART(0X0A);
		OUTA_UART(0X0D);


	}
}

void printHex(int number, int digits[]){

	volatile unsigned int hexNums[3];

	hexNums[2]=number/256;

	hexNums[1]=(number - (hexNums[2]*256)) /16;

	hexNums[0]= (number - (hexNums[2]*256)) - hexNums[1]*16;

	OUTA_UART(HextoASCII(hexNums[2]));
	LCDSeg[2]=digits[hexNums[2]];

	OUTA_UART(HextoASCII(hexNums[1]));
	LCDSeg[1]=digits[hexNums[1]];

	OUTA_UART(HextoASCII(hexNums[0]));
	LCDSeg[0]=digits[hexNums[0]];


}

char HextoASCII(int hex){

	if (hex >= 0 && hex<=9)
		hex+= 0x30;

	else
		hex+=0x37;

	return (char) hex;

}

int twoHexnumb(){

	volatile unsigned char input[2];
	volatile unsigned int temp;

	input[0]=INCHAR_UART();
	OUTA_UART(input[0]);
	input[1]=INCHAR_UART();
	OUTA_UART(input[1]);

	temp=ASCIItoDecimal(input[0])*16 + ASCIItoDecimal(input[1]);

	return temp;
}

int ASCIItoDecimal(char letter){

	int temp;

	if((letter>0x2F) && (letter<0x3A))	//Check if first char is a number

					temp = letter-0x30;		//Convert ASCII to a Hex value


	else if((letter>0x40) && (letter<0x47))	//Check if second char is uppercase letter

					temp = letter-0x37;		//Convert ASCII to a Hex value

	return temp;

}

void OUTA_UART(unsigned char A){
//---------------------------------------------------------------
//***************************************************************
//---------------------------------------------------------------
// IFG2 register (1) = 1 transmit buffer is empty,
// UCA0TXBUF 8 bit transmit buffer
// wait for the transmit buffer to be empty before sending the
// data out

	do{
	}while ((IFG2&0x02)==0);
	// send the data to the transmit buffer
	UCA0TXBUF =A;
	}

unsigned char INCHAR_UART(void){
//---------------------------------------------------------------
//***************************************************************
//---------------------------------------------------------------
// IFG2 register (0) = 1 receive buffer is full,
// UCA0RXBUF 8 bit receive buffer
// wait for the receive buffer is full before getting the data
	do{
	}while ((IFG2&0x01)==0);
	// go get the char from 33the receive buffer
	return (UCA0RXBUF);
}

void Init_LCD(void){
// Using the LCD A controller for the MSP430fg4618
// the pins of the LCD are memory mapped onto the mp430F4xxx
// memory bus and
// are accessed via LCDSeg[i] array
// See page 260 of Davie's text
// LCD_SIZE-4 only gives the 7 segment displays plus DP, and
// (colons are the same bit setting)
// LCD_SIZE-4 only gives the 7 segment displays plus DP, and
// colons (colons / dp)
// Right most seven segment display is at LCDSeg[0];
// Display format
// 			AAA
// 		   F   B
// 		X  F   B
// 			GGG
//  	X  E   C
// 		   E   C
// 		DP  DDD
// bit order
// dp, E, G, F, D, C, B, A or
// :, E, G, F, D, C, B, A
	int n;
	for (n=0;n<LCD_SIZE;n++){
		// initialize the segment memory to zero to clear the LCD
		// writing a zero in the LCD memory location clears turns
		// off the LCD segment
		// Including all of the special characters
		// This way or
		*(LCDSeg+n) = 0;
		// LCDSeg[n]=0;
	}
// Port 5 ports 5.2-5.4 are connected to com1, com2, com3 of LCD and
// com0 is fixed and already assigned
// Need to assign com1 - com3 to port5
	P5SEL = 0x1C; // BIT4 | BIT3 |BIT2 = 1 P5.4, P.3, P5.2 = 1
// Used the internal voltage for the LCD bit 4 = 0 (VLCDEXT=0)
// internal bias voltage set to 1/3 of Vcc, charge pump disabled,
// page 26-25 of MSP430x4xx user manual
	LCDAVCTL0 = 0x00;
// LCDS28-LCDS0 pins LCDS0 = lsb and LCDS28 = MSB need
// LCDS4 through LCDS24
// from the experimenter board schematic the LCD uses S4-S24,
// S0-S3 are not used here
// Only use up to S24 on the LCD 28-31 not needed.
// Also LCDACTL1 not required since not using S32 - S39
// Davie's book page 260
// page 26-23 of MSP430x4xx user manual
	LCDAPCTL0 = 0x7E;
// The LCD uses the ACLK as the master clock as the scan rate for
// the display segments
// The ACLK has been set to 32768 Hz with the external
// 327768 Hz crystal
// Let's use scan frequency of 256 Hz (This is fast enough not
// to see the display flicker)
// or a divisor of 128
// LCDFREQ division(3 bits), LCDMUX (2 bits), LCDSON segments on,
// Not used, LCDON LCD module on
// 011 = freq /128, 11 = 4 mux's needed since the display uses for
// common inputs com0-com3
// need to turn the LCD on LCDON = 1
// LCDSON allows the segments to be blanked good for blinking but
// needs to be on to
// display the LCD segments LCDSON = 1
// Bit pattern required = 0111 1101 = 0x7d
// page 26-22 of MSP430x4xx user manual
	LCDACTL = 0x7d;
}


void Init_UART(void){
//---------------------------------------------------------------
// Initialization code to set up the uart on the experimenter
// board to 8 data,
// 1 stop, no parity, and 9600 baud, polling operation
//---------------------------------------------------------------

	P2SEL=0x30; // transmit and receive to port 2 b its 4 and 5
	// Bits p2.4 transmit and p2.5 receive
	UCA0CTL0=0; // 8 data, no parity 1 stop, uart, async
	// (7)=1 (parity), (6)=1 Even, (5)= 0 lsb first,
	// (4)= 0 8 data / 1 7 data,
	// (3) 0 1 stop 1 / 2 stop, (2-1) -- UART mode,
	// (0) 0 = async
	UCA0CTL1= 0x41;
	// select ALK 32768 and put in
	// software reset the UART
	// (7-6) 00 UCLK, 01 ACLK (32768 hz), 10 SMCLK,
	// 11 SMCLK
	// (0) = 1 reset
	UCA0BR1=0; // upper byte of divider clock word
	UCA0BR0=3; // clock divide from a clock to bit clock 32768/9600
	// = 3.413
	// UCA0BR1:UCA0BR0 two 8 bit reg to from 16 bit
	// clock divider
	// for the baud rate
	UCA0MCTL=0x06;
	// low frequency mode module 3 modulation pater
	// used for the bit clock
	UCA0STAT=0; // do not loop the transmitter back to the
	// receiver for echoing
	// (7) = 1 echo back trans to rec
	// (6) = 1 framing, (5) = 1 overrun, (4) =1 Parity,
	// (3) = 1 break
	// (0) = 2 transmitting or receiving data
	UCA0CTL1=0x40;
	// take UART out of reset
	IE2=0; // turn transmit interrupts off
	//---------------------------------------------------------------
	//***************************************************************
	//---------------------------------------------------------------
	// IFG2 register (0) = 1 receiver buffer is full,
	// UCA0RXIFG
	// IFG2 register (1) = 1 transmit buffer is empty,
	// UCA0RXIFG
	// UCA0RXBUF 8 bit receiver buffer
	// UCA0TXBUF 8 bit transmit buffer
}
